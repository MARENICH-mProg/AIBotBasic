import os
import asyncio
import logging
import json
from collections import defaultdict
from datetime import datetime

from aiogram import Bot, Dispatcher, html, F
from aiogram.types import Message, FSInputFile, Sticker
from aiogram.enums import ChatAction
from aiogram.filters import CommandStart, Command
from aiogram.client.default import DefaultBotProperties
from openai import OpenAI

from sqlalchemy.ext.asyncio import AsyncSession
from admin.database import async_session
from admin.models import User, Message as DBMessage

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è ---
logging.basicConfig(
    format='[%(levelname)s] %(asctime)s - %(message)s',
    datefmt='%Y-%m-%d %H:%M:%S',
    level=logging.INFO
)
logger = logging.getLogger('TelegramBot')

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ---
from dotenv import load_dotenv
load_dotenv()

TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")

if not TELEGRAM_TOKEN or not OPENAI_API_KEY:
    raise RuntimeError("–ù–µ –∑–∞–¥–∞–Ω TELEGRAM_TOKEN –∏–ª–∏ OPENAI_API_KEY")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è OpenAI-–∫–ª–∏–µ–Ω—Ç–∞
client = OpenAI(api_key=OPENAI_API_KEY)

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_states = defaultdict(lambda: {"is_processing": False, "last_response_id": None})

WELCOME_TEXT = "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –Ω–∞ –±–∞–∑–µ OpenAI. –ì–æ—Ç–æ–≤ –ø–æ–º–æ—á—å –≤–∞–º!"
# –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π file_id –≤–∞—à–µ–≥–æ —Å—Ç–∏–∫–µ—Ä–∞ –∏–∑ BotFather
STICKER_ID = "CAACAgIAAxkBAAEOhxZoLF8eiaEVv5-DojVYr34ibp-jngACKzIAAgFp2UmUd0xG0FOntjYE"

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
dp = Dispatcher()

async def get_or_create_user(session: AsyncSession, telegram_user) -> User:
    from sqlalchemy import select
    
    result = await session.execute(
        select(User).where(User.telegram_id == telegram_user.id)
    )
    user = result.scalar_one_or_none()
    
    if not user:
        user = User(
            telegram_id=telegram_user.id,
            username=telegram_user.username,
            full_name=telegram_user.full_name
        )
        session.add(user)
        await session.commit()
    
    return user

@dp.message(CommandStart())
async def start_handler(message: Message) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user = message.from_user
    try:
        async with async_session() as session:
            await get_or_create_user(session, user)
        await message.answer(WELCOME_TEXT)
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} ({user.full_name}) –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}: {str(e)}")

@dp.message()
async def message_handler(message: Message, bot: Bot) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    chat_id = message.chat.id
    user = message.from_user
    user_text = message.text

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –ª–∏ —É–∂–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if user_states[chat_id]["is_processing"]:
        logger.info(f"–û—Ç–∫–ª–æ–Ω–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id} - –ø—Ä–µ–¥—ã–¥—É—â–∏–π –∑–∞–ø—Ä–æ—Å –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ")
        temp_msg = await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ. –Ø –≤—Å–µ –µ—â–µ –≥–µ–Ω–µ—Ä–∏—Ä—É—é –æ—Ç–≤–µ—Ç –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–π –∑–∞–ø—Ä–æ—Å.")
        await asyncio.sleep(1)
        await temp_msg.delete()
        await message.delete()
        return

    try:
        logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id} ({user.full_name})")
        user_states[chat_id]["is_processing"] = True

        async with async_session() as session:
            db_user = await get_or_create_user(session, user)
            
            # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ —Å–æ–æ–±—â–µ–Ω–∏–∏
            db_message = DBMessage(
                user_id=db_user.id,
                content=user_text
            )
            session.add(db_message)
            await session.commit()

            # 1) –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∏–∫–µ—Ä –∏ –≤–∫–ª—é—á–∞–µ–º typing
            sticker_msg = await message.answer_sticker(STICKER_ID)
            await bot.send_chat_action(chat_id=message.chat.id, action=ChatAction.TYPING)
            
            # 2) –ì–æ—Ç–æ–≤–∏–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤—ã–∑–æ–≤–∞ API —Å —Ñ—É–Ω–∫—Ü–∏–µ–π –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —é–º–æ—Ä–∞
            kwargs = {
                "model": "gpt-4.1-nano",
                "tools": [
                    {
                        "type": "function",
                        "name": "check_humor",
                        "description": "–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–º–µ—à–Ω—ã–º",
                        "parameters": {
                            "type": "object",
                            "properties": {
                                "is_funny": {
                                    "type": "boolean",
                                    "description": "True –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–º–µ—à–Ω–æ–µ, False –µ—Å–ª–∏ –Ω–µ—Ç"
                                }
                            },
                            "required": ["is_funny"]
                        }
                    }
                ],
                "tool_choice": "auto"
            }

            # –§–æ—Ä–º–∏—Ä—É–µ–º –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            input_data = [
                {
                    "role": "user",
                    "content": [
                        {
                            "type": "input_text",
                            "text": user_text
                        }
                    ]
                }
            ]

            prev_id = user_states[chat_id].get('last_response_id')
            if prev_id:
                kwargs["previous_response_id"] = prev_id

            kwargs["input"] = input_data

            # 3) –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –≤—ã–∑–æ–≤ OpenAI API
            response = client.responses.create(**kwargs)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤—ã–∑–æ–≤–∞ —Ñ—É–Ω–∫—Ü–∏–∏
            is_funny = False
            tool_call = None
            
            if response.output and len(response.output) > 0 and response.output[0].type == "function_call":
                tool_call = response.output[0]
                try:
                    args = json.loads(tool_call.arguments)
                    is_funny = args.get("is_funny", False)
                    if is_funny:
                        await bot.set_message_reaction(chat_id=message.chat.id, message_id=message.message_id, reaction=[{"type": "emoji", "emoji": "üòÅ"}])
                        
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ñ—É–Ω–∫—Ü–∏—è –±—ã–ª–∞ –≤—ã–∑–≤–∞–Ω–∞
                    input_data.extend([
                        {
                            "type": "function_call",
                            "call_id": tool_call.call_id,
                            "name": tool_call.name,
                            "arguments": tool_call.arguments
                        },
                        {
                            "type": "function_call_output",
                            "call_id": tool_call.call_id,
                            "output": json.dumps({"is_funny": is_funny})
                        }
                    ])
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ tool_call: {e}")
            
            kwargs["input"] = input_data
            # –ü–æ–ª—É—á–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
            response = client.responses.create(**kwargs)
            user_states[chat_id]['last_response_id'] = response.id

            # 4) –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –∏–∑ –æ—Ç–≤–µ—Ç–∞
            if response.output and len(response.output) > 0:
                for output in response.output:
                    if hasattr(output, 'content') and output.content:
                        reply_text = output.content[0].text.strip()
                        break
                else:
                    reply_text = "–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ —Å–º–æ–≥ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç."
            else:
                reply_text = "–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ —Å–º–æ–≥ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç."

            # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            db_message.response = reply_text
            db_message.is_funny = is_funny
            await session.commit()

            # 5) –£–¥–∞–ª—è–µ–º —Å—Ç–∏–∫–µ—Ä –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
            await sticker_msg.delete()
            await message.answer(reply_text)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}: {str(e)}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    
    finally:
        user_states[chat_id]["is_processing"] = False
        logger.info(f"–ó–∞–≤–µ—Ä—à–µ–Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}")

async def main() -> None:
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞."""
    logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    bot = Bot(
        token=TELEGRAM_TOKEN,
        default=DefaultBotProperties(parse_mode="HTML")
    )

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º uvloop –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –Ω–∞ Unix-—Å–∏—Å—Ç–µ–º–∞—Ö
    if os.name != "nt":  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–µ Windows
        import uvloop
        uvloop.install()
        logger.info("uvloop —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

    logger.info("–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    await dp.start_polling(bot)

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {str(e)}")
